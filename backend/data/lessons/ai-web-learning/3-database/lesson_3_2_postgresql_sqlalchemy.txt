# –£—Ä–æ–∫ 3.2: PostgreSQL –∏ SQLAlchemy ORM - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É Python –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

> **–ú–æ–¥—É–ª—å 3:** –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
> **–£—Ä–æ–∫:** 3.2  
> **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 60-75 –º–∏–Ω—É—Ç  
> **Prerequisite:** –£—Ä–æ–∫ 3.1 (SQL vs NoSQL)

---

## üéØ –¶–µ–ª–∏ —É—Ä–æ–∫–∞

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —Ç—ã —Å–º–æ–∂–µ—à—å:
- ‚úÖ –ü–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ —Ç–∞–∫–æ–µ ORM –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω (–±–µ–∑ ORM = –ø–∏—Å–∞—Ç—å SQL —Ä—É–∫–∞–º–∏)
- ‚úÖ –†–∞–±–æ—Ç–∞—Ç—å —Å SQLAlchemy –¥–ª—è —Å–≤—è–∑–∏ Python –∫–æ–¥–∞ —Å PostgreSQL
- ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ —Å relationships (One-to-Many, Foreign Keys)
- ‚úÖ –ü–æ–Ω–∏–º–∞—Ç—å async SQLAlchemy –¥–ª—è FastAPI
- ‚úÖ –ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ Supabase PostgreSQL —á–µ—Ä–µ–∑ Claude Code
- ‚úÖ –í—ã–ø–æ–ª–Ω—è—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ORM

---

## üìñ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: –ß—Ç–æ —Ç–∞–∫–æ–µ ORM?

### –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

**ORM (Object-Relational Mapping)** - —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É Python –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ SQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å Python –∫–ª–∞—Å—Å–∞–º–∏, –∞ ORM –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —ç—Ç–æ –≤ SQL –∑–∞–ø—Ä–æ—Å—ã.

**–ë–µ–∑ ORM:**
```python
# –ü–∏—à–µ—à—å SQL —Ä—É–∫–∞–º–∏ (–æ–ø–∞—Å–Ω–æ, –º–æ–∂–Ω–æ –æ—à–∏–±–∏—Ç—å—Å—è)
cursor.execute("SELECT * FROM projects WHERE user_id = ?", (user_id,))
projects = cursor.fetchall()
```

**–° ORM (SQLAlchemy):**
```python
# –†–∞–±–æ—Ç–∞–µ—à—å —Å Python –æ–±—ä–µ–∫—Ç–∞–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —á–∏—Ç–∞–µ–º–æ)
projects = await session.query(Project).filter(Project.user_id == user_id).all()
```

### –ó–∞—á–µ–º –Ω—É–∂–µ–Ω ORM

**–ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑ ORM:**
- ‚ùå –ü–∏—Å–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã —Ä—É–∫–∞–º–∏ (–ª–µ–≥–∫–æ –æ—à–∏–±–∏—Ç—å—Å—è)
- ‚ùå SQL injection —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (—Ö–∞–∫–µ—Ä—ã –º–æ–≥—É—Ç –≤–∑–ª–æ–º–∞—Ç—å)
- ‚ùå –†–∞–∑–Ω—ã–µ SQL –¥–∏–∞–ª–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ë–î (PostgreSQL ‚â† MySQL)
- ‚ùå –ù–µ—Ç type safety (Python –Ω–µ –∑–Ω–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö)
- ‚ùå –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞

**–° ORM:**
- ‚úÖ Python –∫–æ–¥ –≤–º–µ—Å—Ç–æ SQL (–ø—Ä–∏–≤—ã—á–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
- ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (ORM –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç SQL injection)
- ‚úÖ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–æ–¥ –¥–ª—è PostgreSQL/MySQL)
- ‚úÖ Type hints (IDE –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—è)
- ‚úÖ –ú–µ–Ω—å—à–µ –∫–æ–¥–∞ (DRY - Don't Repeat Yourself)

---

## üè™ –ê–Ω–∞–ª–æ–≥–∏—è: –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ

–ü—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –≤ –ö–∏—Ç–∞–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, –Ω–µ –∑–Ω–∞–µ—à—å –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫:

### –ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ (–ë–µ–∑ ORM)

```
–¢—ã (—Ç—É—Ä–∏—Å—Ç)          –ü–æ–≤–∞—Ä (–ë–î)
     ‚îÇ                   ‚îÇ
     ‚îÇ  "ÁªôÊàë‰∏Ä‰ªΩ..." ‚ùå   ‚îÇ
     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ (–ù–µ –ø–æ–Ω—è–ª!)
                         ‚îÇ
     ‚îÇ   "Um... food?"   ‚îÇ
     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ (Confusion!)
```

**–ü—Ä–æ–±–ª–µ–º—ã:**
- ‚ùå –¢—ã –Ω–µ –∑–Ω–∞–µ—à—å –∫–∏—Ç–∞–π—Å–∫–∏–π (SQL)
- ‚ùå –ú–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
- ‚ùå –ü–æ–≤–∞—Ä –Ω–µ –ø–æ–π–º—ë—Ç
- ‚ùå –î–æ–ª–≥–æ –∏ —Å–ª–æ–∂–Ω–æ

---

### –° –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º (–° ORM)

```
–¢—ã (Python)         –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ (ORM)         –ü–æ–≤–∞—Ä (PostgreSQL)
     ‚îÇ                      ‚îÇ                        ‚îÇ
     ‚îÇ "–•–æ—á—É –ª–∞–ø—à—É"         ‚îÇ                        ‚îÇ
     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ                        ‚îÇ
                            ‚îÇ  SELECT * FROM dishes   ‚îÇ
                            ‚îÇ  WHERE name='noodles'   ‚îÇ
                            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ
                                                     ‚îÇ
                            ‚îÇ    [–õ–∞–ø—à–∞ –≥–æ—Ç–æ–≤–∞]      ‚îÇ
                            ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
     ‚îÇ    Noodles object    ‚îÇ
     ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- ‚úÖ –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Å–≤–æ—ë–º —è–∑—ã–∫–µ (Python)
- ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–Ω–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏–π (SQL)
- ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–µ –æ—à–∏–±–∞–µ—Ç—Å—è
- ‚úÖ –ë—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ

**SQLAlchemy - —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É Python –∏ PostgreSQL!**

---

## üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–ö–†–ò–¢–ò–ß–ù–û!)

### –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM (SQLAlchemy)

**‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è:**

1. **REST API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∫ EngineCamPro v2)**
   - Python Backend + SQL –ë–î
   - –°–ª–æ–∂–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏
   - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (Create, Read, Update, Delete)
   - Type safety –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò

2. **–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –Ω–∞ Python**
   - FastAPI + PostgreSQL
   - Async –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
   - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã

3. **Data Science / ML –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**
   - Jupyter Notebooks + –ë–î
   - Pandas integration
   - –°–ª–æ–∂–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã

4. **–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**
   - –ë–æ–ª—å—à–∏–µ –∫–æ–º–∞–Ω–¥—ã (—á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥)
   - –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î (Alembic)
   - –†–∞–∑–Ω—ã–µ –°–£–ë–î (PostgreSQL/MySQL/SQLite)

---

### –ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM

**‚ö†Ô∏è –ü–ª–æ—Ö–æ–π –≤—ã–±–æ—Ä –¥–ª—è:**

1. **Next.js Full-Stack –ø—Ä–æ–µ–∫—Ç—ã**
   - JavaScript/TypeScript –≤–µ–∑–¥–µ
   - –ò—Å–ø–æ–ª—å–∑—É–π Prisma ORM (–¥–ª—è JavaScript)
   - –ò–ª–∏ Drizzle ORM (–¥–ª—è TypeScript)

2. **–ü—Ä–æ—Å—Ç—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã**
   - –û–¥–∏–Ω SELECT –±–µ–∑ JOIN
   - Raw SQL –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ

3. **–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**
   - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
   - Real-time –∏–≥—Ä—ã
   - Raw SQL –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ–µ

4. **–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã**
   - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ JOIN
   - Window functions
   - –õ—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å raw SQL

---

## üîß –¢—Ä–∏ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫—É—Ä—Å–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ORM

### 1. EngineCamPro v2 (FastAPI + React)

**–ò—Å–ø–æ–ª—å–∑—É–µ–º: SQLAlchemy** ‚úÖ

**–ü–æ—á–µ–º—É:**
```python
# Python Backend ‚Üí SQLAlchemy ‚Üí PostgreSQL

# –ú–æ–¥–µ–ª–∏ –ø–æ–Ω—è—Ç–Ω—ã –¥–ª—è –ò–ò:
class User(Base):
    __tablename__ = "users"
    id = Column(String(255), primary_key=True)
    projects = relationship("Project")  # –°–≤—è–∑—å!

class Project(Base):
    __tablename__ = "projects"
    id = Column(Integer, primary_key=True)
    user_id = Column(String(255), ForeignKey("users.id"))
    cams = relationship("Cam")  # –°–≤—è–∑—å!

# ORM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç JOIN:
user_projects = await session.query(Project)\
    .filter(Project.user_id == "user123")\
    .all()
```

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- ‚úÖ Type hints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code
- ‚úÖ Async –¥–ª—è FastAPI (–≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
- ‚úÖ Relationships (User ‚Üí Projects ‚Üí Cams)
- ‚úÖ Migrations —á–µ—Ä–µ–∑ Alembic

---

### 2. –ë—ã—Å—Ç—Ä—ã–µ Full-Stack –ø—Ä–æ–µ–∫—Ç—ã (Next.js)

**–ò—Å–ø–æ–ª—å–∑—É–µ–º: Prisma ORM** ‚úÖ

**–ü–æ—á–µ–º—É:**
```typescript
// JavaScript/TypeScript –≤–µ–∑–¥–µ
// Prisma ORM –¥–ª—è Next.js

// schema.prisma
model User {
  id       String    @id @default(cuid())
  email    String    @unique
  posts    Post[]    // –°–≤—è–∑—å!
}

model Post {
  id       Int       @id @default(autoincrement())
  title    String
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
}

// TypeScript –∫–æ–¥:
const posts = await prisma.post.findMany({
  where: { authorId: userId },
  include: { author: true }  // JOIN –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
})
```

**–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy:**
- ‚ùå Python ORM –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è JavaScript –ø—Ä–æ–µ–∫—Ç–∞
- ‚úÖ Prisma - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è Next.js

---

### 3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ (RAG + AI)

**–ò—Å–ø–æ–ª—å–∑—É–µ–º: SQLAlchemy + pgvector** üîÑ

**–ü–æ—á–µ–º—É:**
```python
# FastAPI Backend + PostgreSQL + pgvector extension

# –û–±—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏:
class User(Base):
    courses = relationship("Course")

class Course(Base):
    documents = relationship("Document")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è RAG:
from pgvector.sqlalchemy import Vector

class Document(Base):
    __tablename__ = "documents"
    id = Column(Integer, primary_key=True)
    content = Column(Text)
    embedding = Column(Vector(1536))  # OpenAI embeddings!

# Semantic search —á–µ—Ä–µ–∑ ORM:
results = await session.query(Document)\
    .order_by(Document.embedding.cosine_distance(query_embedding))\
    .limit(5)\
    .all()
```

**–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:**
- ‚úÖ SQLAlchemy –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ pgvector extension –¥–ª—è vector search (RAG)

---

## üîÑ SQLAlchemy vs Raw SQL vs Other ORMs

### –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞

| –ê—Å–ø–µ–∫—Ç | SQLAlchemy (Python) | Raw SQL | Prisma (JS/TS) | Django ORM |
|--------|---------------------|---------|----------------|------------|
| **–Ø–∑—ã–∫** | Python | SQL | TypeScript | Python |
| **Type safety** | ‚úÖ Type hints | ‚ùå –ù–µ—Ç | ‚úÖ –ü–æ–ª–Ω–∞—è | ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è |
| **Async –ø–æ–¥–¥–µ—Ä–∂–∫–∞** | ‚úÖ –î–∞ (v2.0+) | ‚úÖ –î–∞ | ‚úÖ –î–∞ | ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è |
| **–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è** | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è | ‚úÖ –ü—Ä–æ—Å—Ç–∞—è | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è |
| **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** | ‚úÖ –í—ã—Å–æ–∫–∞—è | ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è | ‚úÖ –í—ã—Å–æ–∫–∞—è | ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è |
| **Relationships** | ‚úÖ –û—Ç–ª–∏—á–Ω–æ | ‚ùå –†—É–∫–∞–º–∏ | ‚úÖ –û—Ç–ª–∏—á–Ω–æ | ‚úÖ –û—Ç–ª–∏—á–Ω–æ |
| **–ú–∏–≥—Ä–∞—Ü–∏–∏** | ‚úÖ Alembic | ‚ùå –†—É–∫–∞–º–∏ | ‚úÖ Prisma Migrate | ‚úÖ Django Migrations |
| **–î–ª—è FastAPI** | ‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ | ‚ö†Ô∏è –ú–æ–∂–Ω–æ | ‚ùå –ù–µ—Ç | ‚ùå –ù–µ—Ç |
| **–î–ª—è Next.js** | ‚ùå –ù–µ—Ç | ‚ö†Ô∏è –ú–æ–∂–Ω–æ | ‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ | ‚ùå –ù–µ—Ç |
| **–†–∞–±–æ—Ç–∞ —Å –ò–ò** | ‚úÖ –û—Ç–ª–∏—á–Ω–æ | ‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ | ‚úÖ –û—Ç–ª–∏—á–Ω–æ | ‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ |
| **EngineCamPro v2** | ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º | ‚ùå –ù–µ—Ç | ‚ùå –ù–µ—Ç | ‚ùå –ù–µ—Ç |

---

## üåê –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç SQLAlchemy –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

### –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å ORM

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ              –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –° SQLALCHEMY ORM                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                                         ‚îÇ
‚îÇ  üíª FRONTEND         üîå FASTAPI          üîÑ SQLALCHEMY      üóÑÔ∏è POSTGRES  ‚îÇ
‚îÇ                                                                         ‚îÇ
‚îÇ  React               Backend             ORM               Database     ‚îÇ
‚îÇ                                                                         ‚îÇ
‚îÇ  [User clicks        [Endpoint]          [Python Models]   [Tables]    ‚îÇ
‚îÇ   "My Projects"]                                                        ‚îÇ
‚îÇ         ‚îÇ                  ‚îÇ                    ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ         ‚îÇ  GET             ‚îÇ                    ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ         ‚îÇ  /api/projects   ‚îÇ                    ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ                    ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                            ‚îÇ                    ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê         ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                 ‚îÇ  async def           ‚îÇ         ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                 ‚îÇ  get_projects()      ‚îÇ         ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò         ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                            ‚îÇ                    ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                            ‚îÇ  Python –∫–æ–¥:       ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                            ‚îÇ  session.query()   ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                                                 ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ  SQLAlchemy –ü–µ—Ä–µ–≤–æ–¥–∏—Ç: ‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ                        ‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ  query(Project)        ‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ  .filter(...)          ‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ        ‚Üì               ‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ  SELECT * FROM projects‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îÇ  WHERE user_id = ?     ‚îÇ  ‚îÇ        ‚îÇ
‚îÇ                                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ        ‚îÇ
‚îÇ                                                 ‚îÇ              ‚îÇ        ‚îÇ
‚îÇ                                                 ‚îÇ  SQL Query   ‚îÇ        ‚îÇ
‚îÇ                                                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ        ‚îÇ
‚îÇ                                                                ‚îÇ        ‚îÇ
‚îÇ                                                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                                                    ‚îÇ   PostgreSQL     ‚îÇ ‚îÇ
‚îÇ                                                    ‚îÇ                  ‚îÇ ‚îÇ
‚îÇ                                                    ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ ‚îÇ
‚îÇ                                JSON                ‚îÇ  ‚îÇ  projects  ‚îÇ  ‚îÇ ‚îÇ
‚îÇ                            ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÇ id | name  ‚îÇ  ‚îÇ ‚îÇ
‚îÇ       [{id:1, name:"V8"}]                          ‚îÇ  ‚îÇ 1  | V8    ‚îÇ  ‚îÇ ‚îÇ
‚îÇ                                                    ‚îÇ  ‚îÇ 2  | V6    ‚îÇ  ‚îÇ ‚îÇ
‚îÇ                                                    ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ ‚îÇ
‚îÇ                                                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                         ‚îÇ
‚îÇ  [Display projects]                                                     ‚îÇ
‚îÇ                                                                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:

1. **Frontend ‚Üí Backend:** HTTP –∑–∞–ø—Ä–æ—Å (JSON)
2. **Backend ‚Üí ORM:** Python –∫–æ–¥ (`session.query(Project)`)
3. **ORM ‚Üí –ë–î:** SQL –∑–∞–ø—Ä–æ—Å (`SELECT * FROM projects`)
4. **–ë–î ‚Üí ORM:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)
5. **ORM ‚Üí Backend:** Python –æ–±—ä–µ–∫—Ç—ã (`List[Project]`)
6. **Backend ‚Üí Frontend:** JSON –æ—Ç–≤–µ—Ç

**ORM = –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É Python –∏ SQL!**

---

## üìö SQLAlchemy –æ—Å–Ω–æ–≤—ã

### Async SQLAlchemy 2.0

**–ü–æ—á–µ–º—É async?**
- FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
- –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –∂–¥—ë–º –ë–î
- –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ SQLAlchemy –ø—Ä–æ–µ–∫—Ç–∞

```
backend/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ database.py          # ‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
‚îÇ   ‚îú‚îÄ‚îÄ models/              # üì¶ SQLAlchemy –º–æ–¥–µ–ª–∏
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.py          # User –º–æ–¥–µ–ª—å
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ project.py       # Project –º–æ–¥–µ–ª—å
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cam.py           # Cam –º–æ–¥–µ–ª—å
‚îÇ   ‚îú‚îÄ‚îÄ schemas/             # üìã Pydantic —Å—Ö–µ–º—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ project.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cam.py
‚îÇ   ‚îî‚îÄ‚îÄ routers/             # üõ£Ô∏è API endpoints
‚îÇ       ‚îî‚îÄ‚îÄ projects.py
```

---

### –§–∞–π–ª: `app/database.py`

```python
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import NullPool
import os

# DATABASE_URL –∏–∑ .env —Ñ–∞–π–ª–∞
DATABASE_URL = os.getenv("DATABASE_URL")

# Async engine –¥–ª—è PostgreSQL
engine = create_async_engine(
    DATABASE_URL,
    echo=True,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    poolclass=NullPool  # –î–ª—è Serverless (Railway, Heroku)
)

# Session factory
AsyncSessionLocal = sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False  # –û–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ commit
)

# Base class –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# Dependency –¥–ª—è FastAPI endpoints
async def get_db():
    """–°–æ–∑–¥–∞—ë—Ç —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit
        except Exception:
            await session.rollback()  # –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            raise
        finally:
            await session.close()
```

---

### –§–∞–π–ª: `app/models/user.py`

```python
from sqlalchemy import Column, String, DateTime
from sqlalchemy.orm import relationship
from datetime import datetime
from app.database import Base

class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "users"
    
    # –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
    id = Column(String(255), primary_key=True)  # Clerk user ID
    email = Column(String(255), unique=True, nullable=False, index=True)
    subscription_status = Column(String(50), default="free")
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships (—Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏)
    projects = relationship(
        "Project",
        back_populates="user",
        cascade="all, delete-orphan"  # –£–¥–∞–ª–∏–ª user ‚Üí —É–¥–∞–ª–∏–ª–∏—Å—å projects
    )
    
    def __repr__(self):
        return f"<User(id={self.id}, email={self.email})>"
```

---

### –§–∞–π–ª: `app/models/project.py`

```python
from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime
from app.database import Base

class Project(Base):
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∫—É–ª–∞—á–∫–æ–≤"""
    __tablename__ = "projects"
    
    # –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String(255), ForeignKey("users.id"), nullable=False, index=True)
    name = Column(String(255), nullable=False)
    description = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="projects")
    cams = relationship(
        "Cam",
        back_populates="project",
        cascade="all, delete-orphan"  # –£–¥–∞–ª–∏–ª project ‚Üí —É–¥–∞–ª–∏–ª–∏—Å—å cams
    )
    
    def __repr__(self):
        return f"<Project(id={self.id}, name={self.name})>"
```

---

### –§–∞–π–ª: `app/models/cam.py`

```python
from sqlalchemy import Column, Integer, String, Numeric, DateTime, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import relationship
from datetime import datetime
from app.database import Base

class Cam(Base):
    """–ú–æ–¥–µ–ª—å –∫—É–ª–∞—á–∫–∞"""
    __tablename__ = "cams"
    
    # –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
    id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("projects.id"), nullable=False, index=True)
    name = Column(String(255), nullable=False)
    cam_type = Column(String(50), nullable=False)  # 'intake' –∏–ª–∏ 'exhaust'
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—É–ª–∞—á–∫–∞
    lift = Column(Numeric(5, 2), nullable=False)  # –º–º
    duration = Column(Integer, nullable=False)     # –≥—Ä–∞–¥—É—Å—ã
    
    # –†–∞—Å—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)
    profile_points = Column(JSONB)  # [{angle: 0, radius: 20}, ...]
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    project = relationship("Project", back_populates="cams")
    
    def __repr__(self):
        return f"<Cam(id={self.id}, name={self.name}, type={self.cam_type})>"
```

---

### Relationships (–°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏)

```python
# One-to-Many: User ‚Üí Projects
class User(Base):
    projects = relationship("Project", back_populates="user")

class Project(Base):
    user_id = Column(ForeignKey("users.id"))
    user = relationship("User", back_populates="projects")


# One-to-Many: Project ‚Üí Cams
class Project(Base):
    cams = relationship("Cam", back_populates="project")

class Cam(Base):
    project_id = Column(ForeignKey("projects.id"))
    project = relationship("Project", back_populates="cams")
```

**–î–∏–∞–≥—Ä–∞–º–º–∞ —Å–≤—è–∑–µ–π:**
```
User (1) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ (Many) Projects
              ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ (Many) Cams

user.projects  ‚Üí List[Project]
project.user   ‚Üí User
project.cams   ‚Üí List[Cam]
cam.project    ‚Üí Project
```

---

## ü§ñ –†–∞–±–æ—Ç–∞ —Å Claude Code

### –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞—Ç—å SQLAlchemy –º–æ–¥–µ–ª–∏ –¥–ª—è EngineCamPro v2

---

### ‚ùå –ü–ª–æ—Ö–æ–π –¥–∏–∞–ª–æ–≥ (–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π)

```
–¢—ã: –°–æ–∑–¥–∞–π –º–æ–¥–µ–ª–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

Claude Code: –ö–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã? –ö–∞–∫–∏–µ –ø–æ–ª—è?

–¢—ã: –î–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤.

Claude Code: –ö–∞–∫–∏–µ –ø–æ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ? –ö–∞–∫–∏–µ —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏?

–¢—ã: –ù–µ –∑–Ω–∞—é, —Å–¥–µ–ª–∞–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ.

Claude Code: [—Å–æ–∑–¥–∞—ë—Ç —á—Ç–æ-—Ç–æ –æ–±—â–µ–µ, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è EngineCamPro]
```

**–ü—Ä–æ–±–ª–µ–º—ã:**
- ‚ùå –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
- ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–≤—è–∑–∏ (relationships)
- ‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –ø–æ–ª–µ–π
- ‚ùå Claude Code –≤—ã–Ω—É–∂–¥–µ–Ω —É–≥–∞–¥—ã–≤–∞—Ç—å

---

### ‚úÖ –•–æ—Ä–æ—à–∏–π –¥–∏–∞–ª–æ–≥ (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π)

```
–¢—ã: –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É SQLAlchemy –º–æ–¥–µ–ª–µ–π –¥–ª—è EngineCamPro v2.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:
- Backend: FastAPI (async)
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL (Supabase)
- ORM: SQLAlchemy 2.0+ (async)
- Python 3.11+

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:

1. Users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
   - id: VARCHAR(255) PK (Clerk user ID, –Ω–µ auto-increment)
   - email: VARCHAR(255) UNIQUE NOT NULL
   - subscription_status: VARCHAR(50) DEFAULT 'free'
   - created_at, updated_at: TIMESTAMP

2. Projects (–ø—Ä–æ–µ–∫—Ç—ã –∫—É–ª–∞—á–∫–æ–≤)
   - id: SERIAL PK (auto-increment)
   - user_id: VARCHAR(255) FK ‚Üí users.id
   - name: VARCHAR(255) NOT NULL
   - description: TEXT (optional)
   - created_at, updated_at: TIMESTAMP

3. Cams (–∫—É–ª–∞—á–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
   - id: SERIAL PK
   - project_id: INTEGER FK ‚Üí projects.id
   - name: VARCHAR(255) NOT NULL
   - cam_type: VARCHAR(50) ('intake' –∏–ª–∏ 'exhaust')
   - lift: DECIMAL(5,2) NOT NULL (–º–º)
   - duration: INTEGER NOT NULL (–≥—Ä–∞–¥—É—Å—ã)
   - profile_points: JSONB (–º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è)
   - created_at, updated_at: TIMESTAMP

Relationships:
- User HAS MANY Projects (One-to-Many)
- Project HAS MANY Cams (One-to-Many)
- CASCADE DELETE: —É–¥–∞–ª–∏–ª user ‚Üí —É–¥–∞–ª–∏–ª–∏—Å—å projects
- CASCADE DELETE: —É–¥–∞–ª–∏–ª project ‚Üí —É–¥–∞–ª–∏–ª–∏—Å—å cams

–§–∞–π–ª—ã:
backend/app/database.py - async engine, session, Base
backend/app/models/__init__.py - —ç–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
backend/app/models/user.py - User –º–æ–¥–µ–ª—å
backend/app/models/project.py - Project –º–æ–¥–µ–ª—å
backend/app/models/cam.py - Cam –º–æ–¥–µ–ª—å

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Async SQLAlchemy (AsyncSession)
- Type hints –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
- Indexes –Ω–∞ Foreign Keys (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
- __repr__ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
- Docstrings –¥–ª—è –º–æ–¥–µ–ª–µ–π
- back_populates –¥–ª—è relationships

Claude Code: –û—Ç–ª–∏—á–Ω–æ! –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π:

1. app/database.py:
   - create_async_engine (PostgreSQL + asyncpg)
   - AsyncSession factory
   - get_db() dependency –¥–ª—è FastAPI
   - Base = declarative_base()

2. app/models/user.py:
   - User –º–æ–¥–µ–ª—å —Å –ø–æ–ª—è–º–∏ (id, email, subscription_status, timestamps)
   - relationship("Project", back_populates="user", cascade="all, delete-orphan")
   - Index –Ω–∞ email (–¥–ª—è –ø–æ–∏—Å–∫–∞)
   - __repr__ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

3. app/models/project.py:
   - Project –º–æ–¥–µ–ª—å —Å –ø–æ–ª—è–º–∏ (id, user_id FK, name, description, timestamps)
   - relationship –Ω–∞ User (Many-to-One)
   - relationship –Ω–∞ Cams (One-to-Many)
   - Index –Ω–∞ user_id (–¥–ª—è JOIN)
   - __repr__

4. app/models/cam.py:
   - Cam –º–æ–¥–µ–ª—å —Å –ø–æ–ª—è–º–∏ (id, project_id FK, name, cam_type, lift, duration, profile_points JSONB, timestamps)
   - relationship –Ω–∞ Project (Many-to-One)
   - Index –Ω–∞ project_id
   - __repr__

5. app/models/__init__.py:
   - –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
   - __all__ = ["User", "Project", "Cam", "Base"]

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤—è–∑–µ–π:
User.projects ‚Üí List[Project]
Project.user ‚Üí User
Project.cams ‚Üí List[Cam]
Cam.project ‚Üí Project

–ü—Ä–∏–º–µ–Ω–∏—Ç—å? [Y/n]

–¢—ã: Y

Claude Code: ‚úÖ –°–æ–∑–¥–∞–ª –≤—Å–µ —Ñ–∞–π–ª—ã!

app/database.py:
```python
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
import os

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://user:pass@localhost/db")

engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except:
            await session.rollback()
            raise
        finally:
            await session.close()
```

app/models/user.py:
[User –º–æ–¥–µ–ª—å —Å relationships]

app/models/project.py:
[Project –º–æ–¥–µ–ª—å —Å relationships]

app/models/cam.py:
[Cam –º–æ–¥–µ–ª—å —Å JSONB –¥–ª—è profile_points]

app/models/__init__.py:
```python
from app.models.user import User
from app.models.project import Project
from app.models.cam import Cam
from app.database import Base

__all__ = ["User", "Project", "Cam", "Base"]
```

–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:
1. –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å DATABASE_URL
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: sqlalchemy[asyncio], asyncpg, psycopg2-binary
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL

–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é? [Y/n]

–¢—ã: Y

Claude Code: ‚úÖ –°–æ–∑–¥–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é!

docs/database-setup.md:
- –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å Supabase –ø—Ä–æ–µ–∫—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π tier)
- –ì–¥–µ –Ω–∞–π—Ç–∏ DATABASE_URL
- –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª
- –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- Troubleshooting –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

.env.example:
```
DATABASE_URL=postgresql+asyncpg://user:password@host:5432/database
```

requirements.txt –æ–±–Ω–æ–≤–ª—ë–Ω:
```
fastapi
uvicorn
sqlalchemy[asyncio]==2.0.23
asyncpg==0.29.0
psycopg2-binary==2.9.9
pydantic==2.5.0
```

–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ:
1. –°–æ–∑–¥–∞—Ç—å Supabase –ø—Ä–æ–µ–∫—Ç
2. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å DATABASE_URL
3. –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt

–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å Alembic –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü? [Y/n]

–¢—ã: –ü–æ–∫–∞ –Ω–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç?

Claude Code: –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç:

scripts/test_database.py:
```python
import asyncio
from app.database import engine, Base
from app.models import User, Project, Cam

async def test_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    async with engine.begin() as conn:
        # –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables = await conn.run_sync(lambda sync_conn: Base.metadata.tables.keys())
        print(f"üìä –¢–∞–±–ª–∏—Ü—ã: {list(tables)}")

if __name__ == "__main__":
    asyncio.run(test_connection())
```

–ó–∞–ø—É—Å—Ç–∏:
```bash
python scripts/test_database.py
```

–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
```
‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!
üìä –¢–∞–±–ª–∏—Ü—ã: ['users', 'projects', 'cams']
```

–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –æ—à–∏–±–∫—É - –ø—Ä–æ–≤–µ—Ä—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ.

–¢—ã: –û—Ç–ª–∏—á–Ω–æ! –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã CRUD –æ–ø–µ—Ä–∞—Ü–∏–π.

Claude Code: –°–æ–∑–¥–∞–º –ø—Ä–∏–º–µ—Ä—ã!

scripts/crud_examples.py:
```python
from app.database import AsyncSessionLocal
from app.models import User, Project, Cam
from sqlalchemy import select

async def create_example():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (CREATE)"""
    async with AsyncSessionLocal() as session:
        # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            id="user_123",
            email="test@example.com",
            subscription_status="free"
        )
        session.add(user)
        await session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {user}")

async def read_example():
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (READ)"""
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        result = await session.execute(
            select(User).where(User.email == "test@example.com")
        )
        user = result.scalar_one_or_none()
        print(f"üìñ –ù–∞–π–¥–µ–Ω: {user}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ relationship!)
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(user.projects)}")

async def update_example():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (UPDATE)"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.email == "test@example.com")
        )
        user = result.scalar_one()
        
        # –û–±–Ω–æ–≤–∏—Ç—å subscription
        user.subscription_status = "pro"
        await session.commit()
        print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω: {user}")

async def delete_example():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (DELETE)"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.email == "test@example.com")
        )
        user = result.scalar_one()
        
        # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (projects —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - CASCADE!)
        await session.delete(user)
        await session.commit()
        print("‚úÖ –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç—ã")
```

–ó–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã:
```bash
python -c "import asyncio; from scripts.crud_examples import *; asyncio.run(create_example())"
python -c "import asyncio; from scripts.crud_examples import *; asyncio.run(read_example())"
```

–ì–æ—Ç–æ–≤–æ! –ú–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Å–≤—è–∑–∏ (relationships) —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç! üéâ
```

**–ü–æ—á–µ–º—É —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ:**
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ –£–∫–∞–∑–∞–Ω—ã –≤—Å–µ relationships
- ‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ async SQLAlchemy
- ‚úÖ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (—Ç–µ—Å—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã)
- ‚úÖ Claude Code —Å–æ–∑–¥–∞–ª –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π

---

## üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ

### –ó–∞–¥–∞—á–∞

–°–æ–∑–¥–∞–π SQLAlchemy –º–æ–¥–µ–ª–∏ –¥–ª—è EngineCamPro v2 —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ —Å Claude Code –∏ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ Supabase PostgreSQL. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.

---

### –†–∞–±–æ—Ç–∞ —Å Claude Code

**–®–∞–≥ 1:** –°–æ–∑–¥–∞–π Supabase –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)

1. –ó–∞–π–¥–∏ –Ω–∞ [supabase.com](https://supabase.com)
2. –°–æ–∑–¥–∞–π –∞–∫–∫–∞—É–Ω—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
3. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:
   - –ù–∞–∑–≤–∞–Ω–∏–µ: `enginecampro-v2`
   - Database Password: (–∑–∞–ø–æ–º–Ω–∏!)
   - Region: –≤—ã–±–µ—Ä–∏ –±–ª–∏–∂–∞–π—à–∏–π

4. –î–æ–∂–¥–∏—Å—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (~2 –º–∏–Ω—É—Ç—ã)

5. –ü–æ–ª—É—á–∏ DATABASE_URL:
   - Settings ‚Üí Database ‚Üí Connection String
   - –í—ã–±–µ—Ä–∏: "URI" (–Ω–µ "Connection Pooling")
   - –°–∫–æ–ø–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞:
     ```
     postgresql://postgres:[YOUR-PASSWORD]@db.xxx.supabase.co:5432/postgres
     ```
   - –ó–∞–º–µ–Ω–∏ `[YOUR-PASSWORD]` –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
   - –ò–∑–º–µ–Ω–∏ `postgresql://` –Ω–∞ `postgresql+asyncpg://` (–¥–ª—è async!)

---

**–®–∞–≥ 2:** –û—Ç–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ø–∞–ø–∫–µ backend

```bash
cd ~/projects/enginecampro-v2/backend
claude
```

---

**–®–∞–≥ 3:** –î–∏–∞–ª–æ–≥ —Å Claude Code

–°–∫–æ–ø–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–µ–∫—Ü–∏–∏ "‚úÖ –•–æ—Ä–æ—à–∏–π –¥–∏–∞–ª–æ–≥" –≤—ã—à–µ –∏ –æ–±—â–∞–π—Å—è —Å Claude Code. –û–Ω —Å–æ–∑–¥–∞—Å—Ç:
- `app/database.py` - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
- `app/models/user.py` - User –º–æ–¥–µ–ª—å
- `app/models/project.py` - Project –º–æ–¥–µ–ª—å
- `app/models/cam.py` - Cam –º–æ–¥–µ–ª—å
- `app/models/__init__.py` - —ç–∫—Å–ø–æ—Ä—Ç

---

**–®–∞–≥ 4:** –°–æ–∑–¥–∞–π `.env` —Ñ–∞–π–ª

```bash
# –í –∫–æ—Ä–Ω–µ backend/
cat > .env << EOF
DATABASE_URL=postgresql+asyncpg://postgres:YOUR_PASSWORD@db.xxx.supabase.co:5432/postgres
EOF
```

–ó–∞–º–µ–Ω–∏ `YOUR_PASSWORD` –∏ `db.xxx.supabase.co` –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è!

---

**–®–∞–≥ 5:** –£—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

```bash
pip install sqlalchemy[asyncio] asyncpg psycopg2-binary alembic
```

---

**–®–∞–≥ 6:** –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

```bash
# –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ Claude Code (–∫–∞–∫ –≤ –¥–∏–∞–ª–æ–≥–µ –≤—ã—à–µ)
python scripts/test_database.py
```

**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
```
‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!
üìä –¢–∞–±–ª–∏—Ü—ã: ['users', 'projects', 'cams']
```

---

**–®–∞–≥ 7:** –ü—Ä–æ–≤–µ—Ä—å —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase

1. –ó–∞–π–¥–∏ –≤ Supabase Dashboard
2. Table Editor (—Å–ª–µ–≤–∞ –≤ –º–µ–Ω—é)
3. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: `users`, `projects`, `cams`

---

## ‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏

### 1. –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ ORM —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–æ–≥–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –∞–Ω–∞–ª–æ–≥–∏—é (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫). –ù–∞–ø—Ä–∏–º–µ—Ä: ORM –∫–∞–∫...?

<details>
<summary>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</summary>

–ü–æ–¥—É–º–∞–π –ø—Ä–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –≥–¥–µ –Ω—É–∂–µ–Ω "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫":
- –†–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏ (Python ‚Üî SQL)
- –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (JSON ‚Üî XML)
- –†–∞–∑–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (HTTP ‚Üî WebSocket)
</details>

---

### 2. –ó–∞—á–µ–º –Ω—É–∂–µ–Ω ORM? –ü–µ—Ä–µ—á–∏—Å–ª–∏ –º–∏–Ω–∏–º—É–º 5 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤

1. _______
2. _______
3. _______
4. _______
5. _______

<details>
<summary>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</summary>

–ü–æ–¥—É–º–∞–π –ø—Ä–æ:
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (SQL injection)
- –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞
- Type safety
- –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å
- DRY (Don't Repeat Yourself)
</details>

---

### 3. –ß—Ç–æ —Ç–∞–∫–æ–µ relationship –≤ SQLAlchemy?

–û–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä –∏–∑ EngineCamPro (User ‚Üí Projects).

<details>
<summary>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</summary>

Relationship - —ç—Ç–æ —Å–≤—è–∑—å –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏.
- –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (User) –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ (Projects)
- `user.projects` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
- –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Foreign Key?
</details>

---

### 4. Async vs Sync SQLAlchemy - –≤ —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞?

–ü–æ—á–µ–º—É –¥–ª—è FastAPI –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º async SQLAlchemy?

<details>
<summary>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</summary>

–ü–æ–¥—É–º–∞–π –ø—Ä–æ:
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ vs –Ω–µ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
- FastAPI –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
</details>

---

### 5. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å

–£ —Ç–µ–±—è –µ—Å—Ç—å User –º–æ–¥–µ–ª—å —Å relationship –Ω–∞ Projects. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email "john@example.com"?

–ù–∞–ø–∏—à–∏ SQLAlchemy –∫–æ–¥ (async).

<details>
<summary>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</summary>

```python
from sqlalchemy import select

async with session:
    result = await session.execute(
        select(User).where(User.email == "john@example.com")
    )
    user = result.scalar_one()
    projects = user.projects  # –ß–µ—Ä–µ–∑ relationship!
```
</details>

---

## üîó –°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ —É—Ä–æ–∫–∞–º–∏

**–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —É—Ä–æ–∫–∞—Ö:**
- **–£—Ä–æ–∫ 3.1:** SQL vs NoSQL - –≤—ã–±—Ä–∞–ª–∏ PostgreSQL –¥–ª—è EngineCamPro
- **–ú–æ–¥—É–ª—å 2:** Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - FastAPI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQLAlchemy

**–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫ —É—Ä–æ–∫–∞–º:**
- **–£—Ä–æ–∫ 3.3:** –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å—Ö–µ–º–∞ –ë–î - —ç–≤–æ–ª—é—Ü–∏—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Alembic
- **–£—Ä–æ–∫ 3.4:** Supabase - —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Supabase PostgreSQL!
- **–ú–æ–¥—É–ª—å 5:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - FastAPI endpoints –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏

**–°–≤—è–∑—å —Å EngineCamPro:**
- –≠—Ç–æ—Ç —É—Ä–æ–∫ —Å–æ–∑–¥–∞–ª **–±–∞–∑—É** –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ - –º–æ–¥–µ–ª–∏ –ë–î
- –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å API endpoints –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ë–î
- –í —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö –¥–æ–±–∞–≤–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ CRUD endpoints

**–°–≤—è–∑—å —Å Next.js (–ú–æ–¥—É–ª—å 8):**
- –í –ú–æ–¥—É–ª–µ 8 —É–≤–∏–¥–∏—à—å Prisma ORM –¥–ª—è JavaScript/TypeScript
- –¢–∞ –∂–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è ORM, –Ω–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —è–∑—ã–∫–∞

**–°–≤—è–∑—å —Å RAG (–ú–æ–¥—É–ª—å 9):**
- –í –ú–æ–¥—É–ª–µ 9 –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy + pgvector extension –¥–ª—è vector search

---

## ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞

**–ü–æ–Ω–∏–º–∞–Ω–∏–µ (–º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å):**
- [ ] –ß—Ç–æ —Ç–∞–∫–æ–µ ORM –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω
- [ ] –ö–∞–∫ SQLAlchemy –ø–µ—Ä–µ–≤–æ–¥–∏—Ç Python ‚Üí SQL
- [ ] –ß—Ç–æ —Ç–∞–∫–æ–µ relationships (One-to-Many, Foreign Keys)
- [ ] –†–∞–∑–Ω–∏—Ü–∞ async vs sync SQLAlchemy
- [ ] –ü–æ—á–µ–º—É –¥–ª—è FastAPI –∏—Å–ø–æ–ª—å–∑—É–µ–º async

**–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:**
- [ ] –°–æ–∑–¥–∞–ª SQLAlchemy –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Claude Code
- [ ] –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Supabase PostgreSQL
- [ ] –ü–æ–Ω–∏–º–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ (database.py, models/)
- [ ] –ú–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ORM

**–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É:**
- [ ] –ú–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç
- [ ] –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ Supabase
- [ ] –ü–æ–Ω–∏–º–∞—é –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç relationships
- [ ] –ì–æ—Ç–æ–≤ –∏–∑—É—á–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (Alembic)

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
- [ ] –ó–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤—ã–≤–æ–¥—ã –≤ `notes/module-3/lesson-3-2-notes.md`
- [ ] –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏

---

## üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è)

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:

**–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
- [SQLAlchemy 2.0 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://docs.sqlalchemy.org/en/20/) - —Å–∞–º–∞—è –ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- [FastAPI + SQLAlchemy –≥–∞–π–¥](https://fastapi.tiangolo.com/tutorial/sql-databases/) - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π tutorial
- [Supabase –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://supabase.com/docs) - Backend-as-a-Service

**–°—Ç–∞—Ç—å–∏:**
- "Understanding SQLAlchemy Relationships" - One-to-Many, Many-to-Many
- "Async SQLAlchemy 2.0 - What's New" - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ 2.0 –≤–µ—Ä—Å–∏–∏

**–í–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**
- "SQLAlchemy ORM Tutorial" - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
- "FastAPI + SQLAlchemy Best Practices" - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏

**–ù–û!** –≠—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫—É—Ä—Å–∞. –ì–ª–∞–≤–Ω–æ–µ - –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é ORM –∏ —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–æ–¥–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Claude Code.

---

**–°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞:** ‚è≥ –ù–µ –Ω–∞—á–∞—Ç  
**–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** _________  
**–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** _________  
**–í—Ä–µ–º—è –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** _______ –º–∏–Ω—É—Ç

---

## üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!

–¢—ã —Ç–µ–ø–µ—Ä—å –ø–æ–Ω–∏–º–∞–µ—à—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç SQLAlchemy ORM –∏ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Python/FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π! –≠—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –≤—Å–µ–π backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

**–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ (3.3)** –º—ã –∏–∑—É—á–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î —á–µ—Ä–µ–∑ Alembic - –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç–µ—Ä—è—è –¥–∞–Ω–Ω—ã–µ.

**–ü–æ–º–Ω–∏:** ORM = –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É Python –∏ SQL. –ì–æ–≤–æ—Ä–∏ –Ω–∞ Python, –ø—É—Å—Ç—å ORM –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ SQL! üöÄ